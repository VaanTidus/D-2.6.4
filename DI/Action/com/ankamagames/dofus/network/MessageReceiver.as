package com.ankamagames.dofus.network
{
    import com.ankamagames.dofus.network.messages.authorized.*;
    import com.ankamagames.dofus.network.messages.common.*;
    import com.ankamagames.dofus.network.messages.common.basic.*;
    import com.ankamagames.dofus.network.messages.connection.*;
    import com.ankamagames.dofus.network.messages.connection.register.*;
    import com.ankamagames.dofus.network.messages.connection.search.*;
    import com.ankamagames.dofus.network.messages.debug.*;
    import com.ankamagames.dofus.network.messages.game.achievement.*;
    import com.ankamagames.dofus.network.messages.game.actions.*;
    import com.ankamagames.dofus.network.messages.game.actions.fight.*;
    import com.ankamagames.dofus.network.messages.game.actions.sequence.*;
    import com.ankamagames.dofus.network.messages.game.approach.*;
    import com.ankamagames.dofus.network.messages.game.atlas.*;
    import com.ankamagames.dofus.network.messages.game.atlas.compass.*;
    import com.ankamagames.dofus.network.messages.game.basic.*;
    import com.ankamagames.dofus.network.messages.game.character.choice.*;
    import com.ankamagames.dofus.network.messages.game.character.creation.*;
    import com.ankamagames.dofus.network.messages.game.character.deletion.*;
    import com.ankamagames.dofus.network.messages.game.character.stats.*;
    import com.ankamagames.dofus.network.messages.game.chat.*;
    import com.ankamagames.dofus.network.messages.game.chat.channel.*;
    import com.ankamagames.dofus.network.messages.game.chat.smiley.*;
    import com.ankamagames.dofus.network.messages.game.context.*;
    import com.ankamagames.dofus.network.messages.game.context.display.*;
    import com.ankamagames.dofus.network.messages.game.context.dungeon.*;
    import com.ankamagames.dofus.network.messages.game.context.fight.*;
    import com.ankamagames.dofus.network.messages.game.context.fight.challenge.*;
    import com.ankamagames.dofus.network.messages.game.context.fight.character.*;
    import com.ankamagames.dofus.network.messages.game.context.mount.*;
    import com.ankamagames.dofus.network.messages.game.context.notification.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.death.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.document.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.guild.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.job.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.party.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.purchasable.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.spell.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.stats.*;
    import com.ankamagames.dofus.network.messages.game.context.roleplay.visual.*;
    import com.ankamagames.dofus.network.messages.game.dialog.*;
    import com.ankamagames.dofus.network.messages.game.friend.*;
    import com.ankamagames.dofus.network.messages.game.guild.*;
    import com.ankamagames.dofus.network.messages.game.guild.tax.*;
    import com.ankamagames.dofus.network.messages.game.initialization.*;
    import com.ankamagames.dofus.network.messages.game.interactive.*;
    import com.ankamagames.dofus.network.messages.game.interactive.meeting.*;
    import com.ankamagames.dofus.network.messages.game.interactive.zaap.*;
    import com.ankamagames.dofus.network.messages.game.inventory.*;
    import com.ankamagames.dofus.network.messages.game.inventory.exchanges.*;
    import com.ankamagames.dofus.network.messages.game.inventory.items.*;
    import com.ankamagames.dofus.network.messages.game.inventory.preset.*;
    import com.ankamagames.dofus.network.messages.game.inventory.spells.*;
    import com.ankamagames.dofus.network.messages.game.inventory.storage.*;
    import com.ankamagames.dofus.network.messages.game.moderation.*;
    import com.ankamagames.dofus.network.messages.game.packs.*;
    import com.ankamagames.dofus.network.messages.game.prism.*;
    import com.ankamagames.dofus.network.messages.game.pvp.*;
    import com.ankamagames.dofus.network.messages.game.script.*;
    import com.ankamagames.dofus.network.messages.game.shortcut.*;
    import com.ankamagames.dofus.network.messages.game.social.*;
    import com.ankamagames.dofus.network.messages.game.startup.*;
    import com.ankamagames.dofus.network.messages.game.subscriber.*;
    import com.ankamagames.dofus.network.messages.handshake.*;
    import com.ankamagames.dofus.network.messages.queues.*;
    import com.ankamagames.dofus.network.messages.secure.*;
    import com.ankamagames.dofus.network.messages.security.*;
    import com.ankamagames.dofus.network.messages.server.basic.*;
    import com.ankamagames.dofus.network.messages.updater.parts.*;
    import com.ankamagames.dofus.network.messages.web.ankabox.*;
    import com.ankamagames.jerakine.logger.*;
    import com.ankamagames.jerakine.managers.*;
    import com.ankamagames.jerakine.network.*;
    import flash.utils.*;

    public class MessageReceiver extends Object implements RawDataParser
    {
        private static const _log:Logger = Log.getLogger(getQualifiedClassName(MessageReceiver));
        private static const _messagesTypes:Dictionary = new Dictionary();

        public function MessageReceiver()
        {
            return;
        }// end function

        public function parse(param1:IDataInput, param2:uint, param3:uint) : INetworkMessage
        {
            var _loc_4:* = _messagesTypes[param2];
            if (!_messagesTypes[param2])
            {
                _log.warn("Unknown packet received (ID " + param2 + ", length " + param3 + ")");
                return null;
            }
            var _loc_5:* = new _loc_4;
            new _loc_4.unpack(param1, param3);
            return _loc_5;
        }// end function

        public static function register() : void
        {
            StoreDataManager.getInstance().registerClass(new NetworkDataContainerMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ProtocolRequired(), true, true);
            StoreDataManager.getInstance().registerClass(new LoginQueueStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new QueueStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ConsoleMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ConsoleCommandsListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new HelloConnectMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CredentialsAcknowledgementMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NicknameRegistrationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NicknameRefusedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NicknameAcceptedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new IdentificationSuccessMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new IdentificationSuccessWithLoginTokenMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new IdentificationFailedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new IdentificationFailedBannedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new IdentificationFailedForBadVersionMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ServersListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ServerStatusUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SelectedServerDataMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SelectedServerRefusedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AcquaintanceSearchErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AcquaintanceServerListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new HelloGameMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AuthenticationTicketAcceptedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AuthenticationTicketRefusedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AlreadyConnectedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AccountLoggingKickedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ServerOptionalFeaturesMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AccountCapabilitiesMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TrustStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CheckFileRequestMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new RawDataMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StartupActionsListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StartupActionFinishedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterCreationResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterDeletionErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterNameSuggestionSuccessMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterNameSuggestionFailureMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharactersListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharactersListWithModificationsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharactersListErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterSelectedSuccessMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterSelectedForceMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterSelectedErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterSelectedErrorMissingMapPackMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PopupWarningMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new BasicDateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new BasicTimeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new BasicNoOperationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SystemMessageDisplayMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TextInformationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new OnConnectionEventMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SetCharacterRestrictionsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ServerExperienceModificatorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameContextCreateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameContextCreateErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameContextDestroyMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameContextRemoveElementMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameContextRemoveMultipleElementsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameContextMoveElementMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameContextMoveMultipleElementsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameContextRefreshEntityLookMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameMapNoMovementMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameMapMovementMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameMapChangeOrientationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameMapChangeOrientationsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameEntityDispositionMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameEntitiesDispositionMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameEntityDispositionErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new BasicWhoIsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new BasicWhoIsNoMatchMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NumericWhoIsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new BasicPongMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new BasicLatencyStatsRequestMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SequenceNumberRequestMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CinematicMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new URLOpenMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DebugHighlightCellsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DebugClearHighlightCellsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DebugInClientMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DisplayNumericalValueMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CurrentMapMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TeleportOnSameMapMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MapFightCountMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MapRunningFightListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MapRunningFightDetailsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MapObstacleUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataInHouseMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsWithCoordsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayShowActorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterStatsListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterLevelUpMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterExperienceGainMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CharacterLevelUpInformationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new UpdateLifePointsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LifePointsRegenBeginMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LifePointsRegenEndMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerLifeStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayGameOverMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayFightRequestCanceledMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayAggressionMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerFightFriendlyRequestedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerFightFriendlyAnsweredMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaRegistrationStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaFightPropositionMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaFighterStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayArenaUpdatePlayerInfosMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayShowChallengeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayRemoveChallengeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlaySpellAnimMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedActionMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedActionFinishedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ShowCellMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ShowCellSpectatorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightStartingMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightJoinMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightPlacementPossiblePositionsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightOptionStateUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightUpdateTeamMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightRemoveTeamMemberMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightHumanReadyStateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightLeaveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightStartMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightSpectateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightResumeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightResumeWithSlavesMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightEndMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightNewRoundMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnStartMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnResumeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnStartSlaveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnReadyRequestMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightSynchronizeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightTurnEndMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightShowFighterMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightRefreshFighterMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameFightShowFighterRandomStaticPoseMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SequenceStartMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SequenceEndMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AbstractGameActionMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionNoopMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AbstractGameActionWithAckMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightNoSpellCastMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AbstractGameActionFightTargetedAbilityMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSpellCastMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightCloseCombatMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightInvisibleDetectedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightPointsVariationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightTackledMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDeathMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightKillMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightVanishMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSpellCooldownVariationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSpellImmunityMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightLifePointsGainMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightLifePointsLostMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightLifeAndShieldPointsLostMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDispellableEffectMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightStateChangeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightReflectSpellMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightReduceDamagesMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightReflectDamagesMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDodgePointLossMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSlideMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightTeleportOnSameMapMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightExchangePositionsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDispellMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDispellEffectMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDispellSpellMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightModifyEffectsDurationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightTriggerEffectMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightStealKamaMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightChangeLookMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightInvisibilityMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightSummonMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightMarkCellsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightUnmarkCellsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightTriggerGlyphTrapMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightInvisibleObstacleMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightCarryCharacterMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightThrowCharacterMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameActionFightDropCharacterMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new EmoteListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new EmoteAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new EmoteRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new EmotePlayAbstractMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new EmotePlayMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new EmotePlayMassiveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new EmotePlayErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChatSmileyMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LocalizedChatSmileyMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MoodSmileyResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChatAbstractServerMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChatServerMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChatAdminServerMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChatServerWithObjectMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChatServerCopyMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChatServerCopyWithObjectMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChatErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new EnabledChannelsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChannelEnablingChangeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SpellListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SlaveSwitchContextMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LeaveDialogMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PauseDialogMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InteractiveUsedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InteractiveUseEndedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InteractiveMapUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StatedMapUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InteractiveElementUpdatedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StatedElementUpdatedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TeleportDestinationsListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ZaapListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TeleportBuddiesMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TeleportBuddiesRequestedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TeleportToBuddyOfferMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TeleportToBuddyCloseMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SpellForgetUIMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SpellForgottenMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SpellUpgradeSuccessMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SpellUpgradeFailureMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SpellItemBoostMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StatsUpgradeResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChallengeTargetsListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChallengeInfoMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChallengeTargetUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChallengeResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChallengeDungeonStackedBonusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AchievementListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AchievementUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AchievementFinishedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonEnteredMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonLeftMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonKeyRingMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonKeyRingUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AlignmentRankUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AlignmentSubAreasListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AlignmentAreaUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AlignmentSubAreaUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AlignmentSubAreaUpdateExtendedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CompassResetMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CompassUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CompassUpdatePartyMemberMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AtlasPointInformationsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new CompassUpdatePvpSeekMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AbstractPartyMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AbstractPartyEventMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyModifiableStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationDungeonMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationDetailsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationDungeonDetailsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyInvitationCancelledForGuestMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyCancelInvitationNotificationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyRefuseInvitationNotificationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyCannotJoinErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyJoinMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyNewGuestMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyNewMemberMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyUpdateLightMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyMemberRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyMemberEjectedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyLeaderUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyFollowStatusUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyLocateMembersMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyLeaveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyKickedByMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyRestrictedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyDeletedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartyLoyaltyStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderAvailableDungeonsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderListenErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRoomContentMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRoomContentUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRegisterSuccessMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRegisterErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SpouseStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new FriendsListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new FriendsListWithSpouseMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new FriendAddFailureMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new FriendAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new FriendUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new FriendDeleteResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new FriendWarnOnConnectionStateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new FriendWarnOnLevelGainStateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new IgnoredListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new IgnoredAddFailureMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new IgnoredAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new IgnoredDeleteResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildCreationStartedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildCreationResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildInvitedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildInvitationStateRecruterMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildInvitationStateRecrutedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildJoinedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildMemberOnlineStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildUIOpenedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildInformationsGeneralMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildInformationsMembersMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildInformationsMemberUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildInformationsPaddocksMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildMemberLeavingMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildLeftMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildMembershipMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildLevelUpMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildInfosUpgradeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildHousesInformationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildHouseUpdateInformationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildHouseRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildPaddockBoughtMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildPaddockRemovedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildMemberWarnOnConnectionStateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorMovementMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorMovementAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorMovementRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorAttackedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorAttackedResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildFightPlayersHelpersJoinMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildFightPlayersHelpersLeaveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildFightPlayersEnemiesListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GuildFightPlayersEnemyRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismBalanceResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismAlignmentBonusResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismFightDefendersStateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismFightDefenderAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismFightDefenderLeaveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismFightDefendersSwapMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismFightAttackedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismFightAttackerAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismFightAttackerRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismWorldInformationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ChallengeFightJoinRefusedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismInfoCloseMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismInfoValidMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismInfoInValidMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PrismFightStateUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new QuestListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new QuestStartedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new QuestValidatedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new QuestObjectiveValidatedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new QuestStepValidatedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new QuestStepStartedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new QuestStepInfoMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NotificationListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NotificationByServerMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SubscriptionLimitationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SubscriptionZoneMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MapNpcsQuestStatusUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NpcGenericActionFailureMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NpcDialogCreationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NpcDialogQuestionMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorDialogQuestionBasicMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new TaxCollectorDialogQuestionExtendedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new EntityTalkMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobDescriptionMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobLevelUpMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobUnlearntMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobExperienceMultiUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobExperienceUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobAllowMultiCraftRequestMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobMultiCraftAvailableSkillsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectorySettingsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobListedUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryEntryMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new KamasUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectGroundAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectGroundListAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectGroundRemovedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectGroundRemovedMultipleMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InventoryContentMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarContentMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarAddErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarRemoveErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarSwapErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarRefreshMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ShortcutBarRemovedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StorageInventoryContentMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StorageKamasUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StorageObjectUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StorageObjectsUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StorageObjectRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new StorageObjectsRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new SetUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InventoryWeightMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectMovementMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectsAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GoldAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectDeletedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectsDeletedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectQuantityMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectsQuantityMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectModifiedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectJobAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ObjectFoundWhileRecoltingMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LivingObjectMessageMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InventoryContentAndPresetMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InventoryPresetUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InventoryPresetItemUpdateErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InventoryPresetItemUpdateMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InventoryPresetSaveResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InventoryPresetDeleteResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new InventoryPresetUseResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeReplayCountModifiedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectRemovedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectModifiedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectPutInBagMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectRemovedFromBagMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeObjectModifiedInBagMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeKamaModifiedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeRequestedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeRequestedTradeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedWithPodsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedWithStorageMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftSlotCountIncreasedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseBuyResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseItemAddOkMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseItemRemoveOkMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseGenericItemAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseGenericItemRemovedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListAddedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListRemovedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeIsReadyMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeLeaveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkNpcTradeMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkNpcShopMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeOkMultiCraftMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftResultWithObjectIdMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftResultWithObjectDescMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftResultMagicWithObjectDescMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeCraftInformationObjectMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkHumanVendorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockStartedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockMovementUpdatedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockMultiMovementUpdatedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockMovementRemovedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeShopStockMultiMovementRemovedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedMountStockMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedBidSellerMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartedBidBuyerMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidPriceMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeTypesExchangerDescriptionForUserMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeTypesItemsExchangerDescriptionForUserMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeWeightMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkTaxCollectorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeGuildTaxCollectorGetMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ItemNoMoreAvailableMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBuyOkMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeSellOkMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeReplyTaxVendorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeWaitingResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkMountWithOutPaddockMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkMountMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountStableErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountStableAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountPaddockAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountStableBornAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountStableRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountPaddockRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountTakenFromPaddockMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountFreeFromPaddockMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeMountSterilizeFromPaddockMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeBidSearchOkMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeItemAutoCraftStopedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeItemAutoCraftRemainingMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkCraftMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkCraftWithInformationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkMulticraftCrafterMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkMulticraftCustomerMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeStartOkJobIndexMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeGoldPaymentForCraftMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeItemPaymentForCraftMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeModifiedPaymentForCraftMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeRemovedPaymentForCraftMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ExchangeClearPaymentForCraftMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new UpdateMountBoostMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PurchasableDialogMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new AccountHouseMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new HousePropertiesMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new HouseBuyResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new HouseSoldMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new HouseToSellListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new HouseGuildNoneMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new HouseGuildRightsMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PaddockPropertiesMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PaddockSellBuyDialogMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameDataPlayFarmObjectAnimationMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PaddockToSellListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountSterilizedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountReleasedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountRenamedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountXpRatioMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountDataMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountDataErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountSetMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountUnSetMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountEquipedErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountRidingMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectRemoveMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectListAddMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MountEmoteIconUsedOkMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LockableShowCodeDialogMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LockableCodeResultMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LockableStateUpdateAbstractMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LockableStateUpdateHouseDoorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new LockableStateUpdateStorageMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DocumentReadingBeginMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ContactLookMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new ContactLookErrorMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new MailStatusMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new NewMailMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PackRestrictedSubAreaMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartsListMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new PartInfoMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DownloadCurrentSpeedMessage(), true, true);
            StoreDataManager.getInstance().registerClass(new DownloadErrorMessage(), true, true);
            return;
        }// end function

        _messagesTypes[2] = NetworkDataContainerMessage;
        _messagesTypes[1] = ProtocolRequired;
        _messagesTypes[10] = LoginQueueStatusMessage;
        _messagesTypes[6100] = QueueStatusMessage;
        _messagesTypes[75] = ConsoleMessage;
        _messagesTypes[6127] = ConsoleCommandsListMessage;
        _messagesTypes[3] = HelloConnectMessage;
        _messagesTypes[6314] = CredentialsAcknowledgementMessage;
        _messagesTypes[5640] = NicknameRegistrationMessage;
        _messagesTypes[5638] = NicknameRefusedMessage;
        _messagesTypes[5641] = NicknameAcceptedMessage;
        _messagesTypes[22] = IdentificationSuccessMessage;
        _messagesTypes[6209] = IdentificationSuccessWithLoginTokenMessage;
        _messagesTypes[20] = IdentificationFailedMessage;
        _messagesTypes[6174] = IdentificationFailedBannedMessage;
        _messagesTypes[21] = IdentificationFailedForBadVersionMessage;
        _messagesTypes[30] = ServersListMessage;
        _messagesTypes[50] = ServerStatusUpdateMessage;
        _messagesTypes[42] = SelectedServerDataMessage;
        _messagesTypes[41] = SelectedServerRefusedMessage;
        _messagesTypes[6143] = AcquaintanceSearchErrorMessage;
        _messagesTypes[6142] = AcquaintanceServerListMessage;
        _messagesTypes[101] = HelloGameMessage;
        _messagesTypes[111] = AuthenticationTicketAcceptedMessage;
        _messagesTypes[112] = AuthenticationTicketRefusedMessage;
        _messagesTypes[109] = AlreadyConnectedMessage;
        _messagesTypes[6029] = AccountLoggingKickedMessage;
        _messagesTypes[6305] = ServerOptionalFeaturesMessage;
        _messagesTypes[6216] = AccountCapabilitiesMessage;
        _messagesTypes[6267] = TrustStatusMessage;
        _messagesTypes[6154] = CheckFileRequestMessage;
        _messagesTypes[6253] = RawDataMessage;
        _messagesTypes[1301] = StartupActionsListMessage;
        _messagesTypes[1304] = StartupActionFinishedMessage;
        _messagesTypes[161] = CharacterCreationResultMessage;
        _messagesTypes[166] = CharacterDeletionErrorMessage;
        _messagesTypes[5544] = CharacterNameSuggestionSuccessMessage;
        _messagesTypes[164] = CharacterNameSuggestionFailureMessage;
        _messagesTypes[151] = CharactersListMessage;
        _messagesTypes[6120] = CharactersListWithModificationsMessage;
        _messagesTypes[5545] = CharactersListErrorMessage;
        _messagesTypes[153] = CharacterSelectedSuccessMessage;
        _messagesTypes[6068] = CharacterSelectedForceMessage;
        _messagesTypes[5836] = CharacterSelectedErrorMessage;
        _messagesTypes[6300] = CharacterSelectedErrorMissingMapPackMessage;
        _messagesTypes[6134] = PopupWarningMessage;
        _messagesTypes[177] = BasicDateMessage;
        _messagesTypes[175] = BasicTimeMessage;
        _messagesTypes[176] = BasicNoOperationMessage;
        _messagesTypes[189] = SystemMessageDisplayMessage;
        _messagesTypes[780] = TextInformationMessage;
        _messagesTypes[5726] = OnConnectionEventMessage;
        _messagesTypes[170] = SetCharacterRestrictionsMessage;
        _messagesTypes[6237] = ServerExperienceModificatorMessage;
        _messagesTypes[200] = GameContextCreateMessage;
        _messagesTypes[6024] = GameContextCreateErrorMessage;
        _messagesTypes[201] = GameContextDestroyMessage;
        _messagesTypes[251] = GameContextRemoveElementMessage;
        _messagesTypes[252] = GameContextRemoveMultipleElementsMessage;
        _messagesTypes[253] = GameContextMoveElementMessage;
        _messagesTypes[254] = GameContextMoveMultipleElementsMessage;
        _messagesTypes[5637] = GameContextRefreshEntityLookMessage;
        _messagesTypes[954] = GameMapNoMovementMessage;
        _messagesTypes[951] = GameMapMovementMessage;
        _messagesTypes[946] = GameMapChangeOrientationMessage;
        _messagesTypes[6155] = GameMapChangeOrientationsMessage;
        _messagesTypes[5693] = GameEntityDispositionMessage;
        _messagesTypes[5696] = GameEntitiesDispositionMessage;
        _messagesTypes[5695] = GameEntityDispositionErrorMessage;
        _messagesTypes[180] = BasicWhoIsMessage;
        _messagesTypes[179] = BasicWhoIsNoMatchMessage;
        _messagesTypes[6297] = NumericWhoIsMessage;
        _messagesTypes[183] = BasicPongMessage;
        _messagesTypes[5816] = BasicLatencyStatsRequestMessage;
        _messagesTypes[6316] = SequenceNumberRequestMessage;
        _messagesTypes[6053] = CinematicMessage;
        _messagesTypes[6266] = URLOpenMessage;
        _messagesTypes[2001] = DebugHighlightCellsMessage;
        _messagesTypes[2002] = DebugClearHighlightCellsMessage;
        _messagesTypes[6028] = DebugInClientMessage;
        _messagesTypes[5808] = DisplayNumericalValueMessage;
        _messagesTypes[220] = CurrentMapMessage;
        _messagesTypes[6048] = TeleportOnSameMapMessage;
        _messagesTypes[210] = MapFightCountMessage;
        _messagesTypes[5743] = MapRunningFightListMessage;
        _messagesTypes[5751] = MapRunningFightDetailsMessage;
        _messagesTypes[6051] = MapObstacleUpdateMessage;
        _messagesTypes[226] = MapComplementaryInformationsDataMessage;
        _messagesTypes[6130] = MapComplementaryInformationsDataInHouseMessage;
        _messagesTypes[6268] = MapComplementaryInformationsWithCoordsMessage;
        _messagesTypes[5632] = GameRolePlayShowActorMessage;
        _messagesTypes[500] = CharacterStatsListMessage;
        _messagesTypes[5670] = CharacterLevelUpMessage;
        _messagesTypes[6321] = CharacterExperienceGainMessage;
        _messagesTypes[6076] = CharacterLevelUpInformationMessage;
        _messagesTypes[5658] = UpdateLifePointsMessage;
        _messagesTypes[5684] = LifePointsRegenBeginMessage;
        _messagesTypes[5686] = LifePointsRegenEndMessage;
        _messagesTypes[5996] = GameRolePlayPlayerLifeStatusMessage;
        _messagesTypes[746] = GameRolePlayGameOverMessage;
        _messagesTypes[5822] = GameRolePlayFightRequestCanceledMessage;
        _messagesTypes[6073] = GameRolePlayAggressionMessage;
        _messagesTypes[5937] = GameRolePlayPlayerFightFriendlyRequestedMessage;
        _messagesTypes[5733] = GameRolePlayPlayerFightFriendlyAnsweredMessage;
        _messagesTypes[6284] = GameRolePlayArenaRegistrationStatusMessage;
        _messagesTypes[6276] = GameRolePlayArenaFightPropositionMessage;
        _messagesTypes[6281] = GameRolePlayArenaFighterStatusMessage;
        _messagesTypes[6301] = GameRolePlayArenaUpdatePlayerInfosMessage;
        _messagesTypes[301] = GameRolePlayShowChallengeMessage;
        _messagesTypes[300] = GameRolePlayRemoveChallengeMessage;
        _messagesTypes[6114] = GameRolePlaySpellAnimMessage;
        _messagesTypes[6153] = GameRolePlayDelayedActionMessage;
        _messagesTypes[6150] = GameRolePlayDelayedActionFinishedMessage;
        _messagesTypes[5612] = ShowCellMessage;
        _messagesTypes[6158] = ShowCellSpectatorMessage;
        _messagesTypes[700] = GameFightStartingMessage;
        _messagesTypes[702] = GameFightJoinMessage;
        _messagesTypes[703] = GameFightPlacementPossiblePositionsMessage;
        _messagesTypes[5927] = GameFightOptionStateUpdateMessage;
        _messagesTypes[5572] = GameFightUpdateTeamMessage;
        _messagesTypes[711] = GameFightRemoveTeamMemberMessage;
        _messagesTypes[740] = GameFightHumanReadyStateMessage;
        _messagesTypes[721] = GameFightLeaveMessage;
        _messagesTypes[712] = GameFightStartMessage;
        _messagesTypes[6069] = GameFightSpectateMessage;
        _messagesTypes[6067] = GameFightResumeMessage;
        _messagesTypes[6215] = GameFightResumeWithSlavesMessage;
        _messagesTypes[720] = GameFightEndMessage;
        _messagesTypes[6239] = GameFightNewRoundMessage;
        _messagesTypes[713] = GameFightTurnListMessage;
        _messagesTypes[714] = GameFightTurnStartMessage;
        _messagesTypes[6307] = GameFightTurnResumeMessage;
        _messagesTypes[6213] = GameFightTurnStartSlaveMessage;
        _messagesTypes[715] = GameFightTurnReadyRequestMessage;
        _messagesTypes[5921] = GameFightSynchronizeMessage;
        _messagesTypes[719] = GameFightTurnEndMessage;
        _messagesTypes[5864] = GameFightShowFighterMessage;
        _messagesTypes[6309] = GameFightRefreshFighterMessage;
        _messagesTypes[6218] = GameFightShowFighterRandomStaticPoseMessage;
        _messagesTypes[955] = SequenceStartMessage;
        _messagesTypes[956] = SequenceEndMessage;
        _messagesTypes[1000] = AbstractGameActionMessage;
        _messagesTypes[1002] = GameActionNoopMessage;
        _messagesTypes[1001] = AbstractGameActionWithAckMessage;
        _messagesTypes[6132] = GameActionFightNoSpellCastMessage;
        _messagesTypes[6118] = AbstractGameActionFightTargetedAbilityMessage;
        _messagesTypes[1010] = GameActionFightSpellCastMessage;
        _messagesTypes[6116] = GameActionFightCloseCombatMessage;
        _messagesTypes[6320] = GameActionFightInvisibleDetectedMessage;
        _messagesTypes[1030] = GameActionFightPointsVariationMessage;
        _messagesTypes[1004] = GameActionFightTackledMessage;
        _messagesTypes[1099] = GameActionFightDeathMessage;
        _messagesTypes[5571] = GameActionFightKillMessage;
        _messagesTypes[6217] = GameActionFightVanishMessage;
        _messagesTypes[6219] = GameActionFightSpellCooldownVariationMessage;
        _messagesTypes[6221] = GameActionFightSpellImmunityMessage;
        _messagesTypes[6311] = GameActionFightLifePointsGainMessage;
        _messagesTypes[6312] = GameActionFightLifePointsLostMessage;
        _messagesTypes[6310] = GameActionFightLifeAndShieldPointsLostMessage;
        _messagesTypes[6070] = GameActionFightDispellableEffectMessage;
        _messagesTypes[5569] = GameActionFightStateChangeMessage;
        _messagesTypes[5531] = GameActionFightReflectSpellMessage;
        _messagesTypes[5526] = GameActionFightReduceDamagesMessage;
        _messagesTypes[5530] = GameActionFightReflectDamagesMessage;
        _messagesTypes[5828] = GameActionFightDodgePointLossMessage;
        _messagesTypes[5525] = GameActionFightSlideMessage;
        _messagesTypes[5528] = GameActionFightTeleportOnSameMapMessage;
        _messagesTypes[5527] = GameActionFightExchangePositionsMessage;
        _messagesTypes[5533] = GameActionFightDispellMessage;
        _messagesTypes[6113] = GameActionFightDispellEffectMessage;
        _messagesTypes[6176] = GameActionFightDispellSpellMessage;
        _messagesTypes[6304] = GameActionFightModifyEffectsDurationMessage;
        _messagesTypes[6147] = GameActionFightTriggerEffectMessage;
        _messagesTypes[5535] = GameActionFightStealKamaMessage;
        _messagesTypes[5532] = GameActionFightChangeLookMessage;
        _messagesTypes[5821] = GameActionFightInvisibilityMessage;
        _messagesTypes[5825] = GameActionFightSummonMessage;
        _messagesTypes[5540] = GameActionFightMarkCellsMessage;
        _messagesTypes[5570] = GameActionFightUnmarkCellsMessage;
        _messagesTypes[5741] = GameActionFightTriggerGlyphTrapMessage;
        _messagesTypes[5820] = GameActionFightInvisibleObstacleMessage;
        _messagesTypes[5830] = GameActionFightCarryCharacterMessage;
        _messagesTypes[5829] = GameActionFightThrowCharacterMessage;
        _messagesTypes[5826] = GameActionFightDropCharacterMessage;
        _messagesTypes[5689] = EmoteListMessage;
        _messagesTypes[5644] = EmoteAddMessage;
        _messagesTypes[5687] = EmoteRemoveMessage;
        _messagesTypes[5690] = EmotePlayAbstractMessage;
        _messagesTypes[5683] = EmotePlayMessage;
        _messagesTypes[5691] = EmotePlayMassiveMessage;
        _messagesTypes[5688] = EmotePlayErrorMessage;
        _messagesTypes[801] = ChatSmileyMessage;
        _messagesTypes[6185] = LocalizedChatSmileyMessage;
        _messagesTypes[6196] = MoodSmileyResultMessage;
        _messagesTypes[880] = ChatAbstractServerMessage;
        _messagesTypes[881] = ChatServerMessage;
        _messagesTypes[6135] = ChatAdminServerMessage;
        _messagesTypes[883] = ChatServerWithObjectMessage;
        _messagesTypes[882] = ChatServerCopyMessage;
        _messagesTypes[884] = ChatServerCopyWithObjectMessage;
        _messagesTypes[870] = ChatErrorMessage;
        _messagesTypes[892] = EnabledChannelsMessage;
        _messagesTypes[891] = ChannelEnablingChangeMessage;
        _messagesTypes[1200] = SpellListMessage;
        _messagesTypes[6214] = SlaveSwitchContextMessage;
        _messagesTypes[5502] = LeaveDialogMessage;
        _messagesTypes[6012] = PauseDialogMessage;
        _messagesTypes[5745] = InteractiveUsedMessage;
        _messagesTypes[6112] = InteractiveUseEndedMessage;
        _messagesTypes[5002] = InteractiveMapUpdateMessage;
        _messagesTypes[5716] = StatedMapUpdateMessage;
        _messagesTypes[5708] = InteractiveElementUpdatedMessage;
        _messagesTypes[5709] = StatedElementUpdatedMessage;
        _messagesTypes[5960] = TeleportDestinationsListMessage;
        _messagesTypes[1604] = ZaapListMessage;
        _messagesTypes[6289] = TeleportBuddiesMessage;
        _messagesTypes[6302] = TeleportBuddiesRequestedMessage;
        _messagesTypes[6287] = TeleportToBuddyOfferMessage;
        _messagesTypes[6303] = TeleportToBuddyCloseMessage;
        _messagesTypes[5565] = SpellForgetUIMessage;
        _messagesTypes[5834] = SpellForgottenMessage;
        _messagesTypes[1201] = SpellUpgradeSuccessMessage;
        _messagesTypes[1202] = SpellUpgradeFailureMessage;
        _messagesTypes[6011] = SpellItemBoostMessage;
        _messagesTypes[5609] = StatsUpgradeResultMessage;
        _messagesTypes[5613] = ChallengeTargetsListMessage;
        _messagesTypes[6022] = ChallengeInfoMessage;
        _messagesTypes[6123] = ChallengeTargetUpdateMessage;
        _messagesTypes[6019] = ChallengeResultMessage;
        _messagesTypes[6151] = ChallengeDungeonStackedBonusMessage;
        _messagesTypes[6205] = AchievementListMessage;
        _messagesTypes[6207] = AchievementUpdateMessage;
        _messagesTypes[6208] = AchievementFinishedMessage;
        _messagesTypes[6152] = DungeonEnteredMessage;
        _messagesTypes[6149] = DungeonLeftMessage;
        _messagesTypes[6299] = DungeonKeyRingMessage;
        _messagesTypes[6296] = DungeonKeyRingUpdateMessage;
        _messagesTypes[6058] = AlignmentRankUpdateMessage;
        _messagesTypes[6059] = AlignmentSubAreasListMessage;
        _messagesTypes[6060] = AlignmentAreaUpdateMessage;
        _messagesTypes[6057] = AlignmentSubAreaUpdateMessage;
        _messagesTypes[6319] = AlignmentSubAreaUpdateExtendedMessage;
        _messagesTypes[5584] = CompassResetMessage;
        _messagesTypes[5591] = CompassUpdateMessage;
        _messagesTypes[5589] = CompassUpdatePartyMemberMessage;
        _messagesTypes[5956] = AtlasPointInformationsMessage;
        _messagesTypes[6013] = CompassUpdatePvpSeekMessage;
        _messagesTypes[6274] = AbstractPartyMessage;
        _messagesTypes[6273] = AbstractPartyEventMessage;
        _messagesTypes[6277] = PartyModifiableStatusMessage;
        _messagesTypes[5586] = PartyInvitationMessage;
        _messagesTypes[6244] = PartyInvitationDungeonMessage;
        _messagesTypes[6263] = PartyInvitationDetailsMessage;
        _messagesTypes[6262] = PartyInvitationDungeonDetailsMessage;
        _messagesTypes[6256] = PartyInvitationCancelledForGuestMessage;
        _messagesTypes[6251] = PartyCancelInvitationNotificationMessage;
        _messagesTypes[5596] = PartyRefuseInvitationNotificationMessage;
        _messagesTypes[5583] = PartyCannotJoinErrorMessage;
        _messagesTypes[5576] = PartyJoinMessage;
        _messagesTypes[6260] = PartyNewGuestMessage;
        _messagesTypes[5575] = PartyUpdateMessage;
        _messagesTypes[6306] = PartyNewMemberMessage;
        _messagesTypes[6054] = PartyUpdateLightMessage;
        _messagesTypes[5579] = PartyMemberRemoveMessage;
        _messagesTypes[6252] = PartyMemberEjectedMessage;
        _messagesTypes[5578] = PartyLeaderUpdateMessage;
        _messagesTypes[5581] = PartyFollowStatusUpdateMessage;
        _messagesTypes[5595] = PartyLocateMembersMessage;
        _messagesTypes[5594] = PartyLeaveMessage;
        _messagesTypes[5590] = PartyKickedByMessage;
        _messagesTypes[6175] = PartyRestrictedMessage;
        _messagesTypes[6261] = PartyDeletedMessage;
        _messagesTypes[6270] = PartyLoyaltyStatusMessage;
        _messagesTypes[6242] = DungeonPartyFinderAvailableDungeonsMessage;
        _messagesTypes[6248] = DungeonPartyFinderListenErrorMessage;
        _messagesTypes[6247] = DungeonPartyFinderRoomContentMessage;
        _messagesTypes[6250] = DungeonPartyFinderRoomContentUpdateMessage;
        _messagesTypes[6241] = DungeonPartyFinderRegisterSuccessMessage;
        _messagesTypes[6243] = DungeonPartyFinderRegisterErrorMessage;
        _messagesTypes[6265] = SpouseStatusMessage;
        _messagesTypes[4002] = FriendsListMessage;
        _messagesTypes[5931] = FriendsListWithSpouseMessage;
        _messagesTypes[5600] = FriendAddFailureMessage;
        _messagesTypes[5599] = FriendAddedMessage;
        _messagesTypes[5924] = FriendUpdateMessage;
        _messagesTypes[5601] = FriendDeleteResultMessage;
        _messagesTypes[5630] = FriendWarnOnConnectionStateMessage;
        _messagesTypes[6078] = FriendWarnOnLevelGainStateMessage;
        _messagesTypes[5674] = IgnoredListMessage;
        _messagesTypes[5679] = IgnoredAddFailureMessage;
        _messagesTypes[5678] = IgnoredAddedMessage;
        _messagesTypes[5677] = IgnoredDeleteResultMessage;
        _messagesTypes[5920] = GuildCreationStartedMessage;
        _messagesTypes[5554] = GuildCreationResultMessage;
        _messagesTypes[5552] = GuildInvitedMessage;
        _messagesTypes[5563] = GuildInvitationStateRecruterMessage;
        _messagesTypes[5548] = GuildInvitationStateRecrutedMessage;
        _messagesTypes[5564] = GuildJoinedMessage;
        _messagesTypes[6061] = GuildMemberOnlineStatusMessage;
        _messagesTypes[5561] = GuildUIOpenedMessage;
        _messagesTypes[5557] = GuildInformationsGeneralMessage;
        _messagesTypes[5558] = GuildInformationsMembersMessage;
        _messagesTypes[5597] = GuildInformationsMemberUpdateMessage;
        _messagesTypes[5959] = GuildInformationsPaddocksMessage;
        _messagesTypes[5923] = GuildMemberLeavingMessage;
        _messagesTypes[5562] = GuildLeftMessage;
        _messagesTypes[5835] = GuildMembershipMessage;
        _messagesTypes[6062] = GuildLevelUpMessage;
        _messagesTypes[5636] = GuildInfosUpgradeMessage;
        _messagesTypes[5919] = GuildHousesInformationMessage;
        _messagesTypes[6181] = GuildHouseUpdateInformationMessage;
        _messagesTypes[6180] = GuildHouseRemoveMessage;
        _messagesTypes[5952] = GuildPaddockBoughtMessage;
        _messagesTypes[5955] = GuildPaddockRemovedMessage;
        _messagesTypes[6160] = GuildMemberWarnOnConnectionStateMessage;
        _messagesTypes[5633] = TaxCollectorMovementMessage;
        _messagesTypes[5634] = TaxCollectorErrorMessage;
        _messagesTypes[5930] = TaxCollectorListMessage;
        _messagesTypes[5917] = TaxCollectorMovementAddMessage;
        _messagesTypes[5915] = TaxCollectorMovementRemoveMessage;
        _messagesTypes[5918] = TaxCollectorAttackedMessage;
        _messagesTypes[5635] = TaxCollectorAttackedResultMessage;
        _messagesTypes[5720] = GuildFightPlayersHelpersJoinMessage;
        _messagesTypes[5719] = GuildFightPlayersHelpersLeaveMessage;
        _messagesTypes[5928] = GuildFightPlayersEnemiesListMessage;
        _messagesTypes[5929] = GuildFightPlayersEnemyRemoveMessage;
        _messagesTypes[5841] = PrismBalanceResultMessage;
        _messagesTypes[5842] = PrismAlignmentBonusResultMessage;
        _messagesTypes[5899] = PrismFightDefendersStateMessage;
        _messagesTypes[5895] = PrismFightDefenderAddMessage;
        _messagesTypes[5892] = PrismFightDefenderLeaveMessage;
        _messagesTypes[5902] = PrismFightDefendersSwapMessage;
        _messagesTypes[5894] = PrismFightAttackedMessage;
        _messagesTypes[5893] = PrismFightAttackerAddMessage;
        _messagesTypes[5897] = PrismFightAttackerRemoveMessage;
        _messagesTypes[5854] = PrismWorldInformationMessage;
        _messagesTypes[5908] = ChallengeFightJoinRefusedMessage;
        _messagesTypes[5853] = PrismInfoCloseMessage;
        _messagesTypes[5858] = PrismInfoValidMessage;
        _messagesTypes[5859] = PrismInfoInValidMessage;
        _messagesTypes[6040] = PrismFightStateUpdateMessage;
        _messagesTypes[5626] = QuestListMessage;
        _messagesTypes[6091] = QuestStartedMessage;
        _messagesTypes[6097] = QuestValidatedMessage;
        _messagesTypes[6098] = QuestObjectiveValidatedMessage;
        _messagesTypes[6099] = QuestStepValidatedMessage;
        _messagesTypes[6096] = QuestStepStartedMessage;
        _messagesTypes[5625] = QuestStepInfoMessage;
        _messagesTypes[6087] = NotificationListMessage;
        _messagesTypes[6103] = NotificationByServerMessage;
        _messagesTypes[5542] = SubscriptionLimitationMessage;
        _messagesTypes[5573] = SubscriptionZoneMessage;
        _messagesTypes[5642] = MapNpcsQuestStatusUpdateMessage;
        _messagesTypes[5900] = NpcGenericActionFailureMessage;
        _messagesTypes[5618] = NpcDialogCreationMessage;
        _messagesTypes[5617] = NpcDialogQuestionMessage;
        _messagesTypes[5619] = TaxCollectorDialogQuestionBasicMessage;
        _messagesTypes[5615] = TaxCollectorDialogQuestionExtendedMessage;
        _messagesTypes[6110] = EntityTalkMessage;
        _messagesTypes[5655] = JobDescriptionMessage;
        _messagesTypes[5656] = JobLevelUpMessage;
        _messagesTypes[5657] = JobUnlearntMessage;
        _messagesTypes[5809] = JobExperienceMultiUpdateMessage;
        _messagesTypes[5654] = JobExperienceUpdateMessage;
        _messagesTypes[5748] = JobAllowMultiCraftRequestMessage;
        _messagesTypes[5747] = JobMultiCraftAvailableSkillsMessage;
        _messagesTypes[6046] = JobCrafterDirectoryListMessage;
        _messagesTypes[5652] = JobCrafterDirectorySettingsMessage;
        _messagesTypes[6016] = JobListedUpdateMessage;
        _messagesTypes[5653] = JobCrafterDirectoryRemoveMessage;
        _messagesTypes[5651] = JobCrafterDirectoryAddMessage;
        _messagesTypes[6044] = JobCrafterDirectoryEntryMessage;
        _messagesTypes[5537] = KamasUpdateMessage;
        _messagesTypes[3017] = ObjectGroundAddedMessage;
        _messagesTypes[5925] = ObjectGroundListAddedMessage;
        _messagesTypes[3014] = ObjectGroundRemovedMessage;
        _messagesTypes[5944] = ObjectGroundRemovedMultipleMessage;
        _messagesTypes[3016] = InventoryContentMessage;
        _messagesTypes[6231] = ShortcutBarContentMessage;
        _messagesTypes[6227] = ShortcutBarAddErrorMessage;
        _messagesTypes[6222] = ShortcutBarRemoveErrorMessage;
        _messagesTypes[6226] = ShortcutBarSwapErrorMessage;
        _messagesTypes[6229] = ShortcutBarRefreshMessage;
        _messagesTypes[6224] = ShortcutBarRemovedMessage;
        _messagesTypes[5646] = StorageInventoryContentMessage;
        _messagesTypes[5645] = StorageKamasUpdateMessage;
        _messagesTypes[5647] = StorageObjectUpdateMessage;
        _messagesTypes[6036] = StorageObjectsUpdateMessage;
        _messagesTypes[5648] = StorageObjectRemoveMessage;
        _messagesTypes[6035] = StorageObjectsRemoveMessage;
        _messagesTypes[5503] = SetUpdateMessage;
        _messagesTypes[3009] = InventoryWeightMessage;
        _messagesTypes[3010] = ObjectMovementMessage;
        _messagesTypes[3025] = ObjectAddedMessage;
        _messagesTypes[6033] = ObjectsAddedMessage;
        _messagesTypes[6030] = GoldAddedMessage;
        _messagesTypes[3004] = ObjectErrorMessage;
        _messagesTypes[3024] = ObjectDeletedMessage;
        _messagesTypes[6034] = ObjectsDeletedMessage;
        _messagesTypes[3023] = ObjectQuantityMessage;
        _messagesTypes[6206] = ObjectsQuantityMessage;
        _messagesTypes[3029] = ObjectModifiedMessage;
        _messagesTypes[6014] = ObjectJobAddedMessage;
        _messagesTypes[6017] = ObjectFoundWhileRecoltingMessage;
        _messagesTypes[6065] = LivingObjectMessageMessage;
        _messagesTypes[6162] = InventoryContentAndPresetMessage;
        _messagesTypes[6171] = InventoryPresetUpdateMessage;
        _messagesTypes[6211] = InventoryPresetItemUpdateErrorMessage;
        _messagesTypes[6168] = InventoryPresetItemUpdateMessage;
        _messagesTypes[6170] = InventoryPresetSaveResultMessage;
        _messagesTypes[6173] = InventoryPresetDeleteResultMessage;
        _messagesTypes[6163] = InventoryPresetUseResultMessage;
        _messagesTypes[6023] = ExchangeReplayCountModifiedMessage;
        _messagesTypes[5515] = ExchangeObjectMessage;
        _messagesTypes[5516] = ExchangeObjectAddedMessage;
        _messagesTypes[5517] = ExchangeObjectRemovedMessage;
        _messagesTypes[5519] = ExchangeObjectModifiedMessage;
        _messagesTypes[6009] = ExchangeObjectPutInBagMessage;
        _messagesTypes[6010] = ExchangeObjectRemovedFromBagMessage;
        _messagesTypes[6008] = ExchangeObjectModifiedInBagMessage;
        _messagesTypes[5521] = ExchangeKamaModifiedMessage;
        _messagesTypes[6020] = ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
        _messagesTypes[5522] = ExchangeRequestedMessage;
        _messagesTypes[5523] = ExchangeRequestedTradeMessage;
        _messagesTypes[5512] = ExchangeStartedMessage;
        _messagesTypes[6129] = ExchangeStartedWithPodsMessage;
        _messagesTypes[6236] = ExchangeStartedWithStorageMessage;
        _messagesTypes[6125] = ExchangeCraftSlotCountIncreasedMessage;
        _messagesTypes[6272] = ExchangeBidHouseBuyResultMessage;
        _messagesTypes[5945] = ExchangeBidHouseItemAddOkMessage;
        _messagesTypes[5946] = ExchangeBidHouseItemRemoveOkMessage;
        _messagesTypes[5947] = ExchangeBidHouseGenericItemAddedMessage;
        _messagesTypes[5948] = ExchangeBidHouseGenericItemRemovedMessage;
        _messagesTypes[5949] = ExchangeBidHouseInListAddedMessage;
        _messagesTypes[5950] = ExchangeBidHouseInListRemovedMessage;
        _messagesTypes[5509] = ExchangeIsReadyMessage;
        _messagesTypes[5513] = ExchangeErrorMessage;
        _messagesTypes[5628] = ExchangeLeaveMessage;
        _messagesTypes[5785] = ExchangeStartOkNpcTradeMessage;
        _messagesTypes[5761] = ExchangeStartOkNpcShopMessage;
        _messagesTypes[5768] = ExchangeOkMultiCraftMessage;
        _messagesTypes[5790] = ExchangeCraftResultMessage;
        _messagesTypes[6000] = ExchangeCraftResultWithObjectIdMessage;
        _messagesTypes[5999] = ExchangeCraftResultWithObjectDescMessage;
        _messagesTypes[6188] = ExchangeCraftResultMagicWithObjectDescMessage;
        _messagesTypes[5794] = ExchangeCraftInformationObjectMessage;
        _messagesTypes[5767] = ExchangeStartOkHumanVendorMessage;
        _messagesTypes[5910] = ExchangeShopStockStartedMessage;
        _messagesTypes[5909] = ExchangeShopStockMovementUpdatedMessage;
        _messagesTypes[6038] = ExchangeShopStockMultiMovementUpdatedMessage;
        _messagesTypes[5907] = ExchangeShopStockMovementRemovedMessage;
        _messagesTypes[6037] = ExchangeShopStockMultiMovementRemovedMessage;
        _messagesTypes[5984] = ExchangeStartedMountStockMessage;
        _messagesTypes[5905] = ExchangeStartedBidSellerMessage;
        _messagesTypes[5904] = ExchangeStartedBidBuyerMessage;
        _messagesTypes[5755] = ExchangeBidPriceMessage;
        _messagesTypes[5765] = ExchangeTypesExchangerDescriptionForUserMessage;
        _messagesTypes[5752] = ExchangeTypesItemsExchangerDescriptionForUserMessage;
        _messagesTypes[5793] = ExchangeWeightMessage;
        _messagesTypes[5780] = ExchangeStartOkTaxCollectorMessage;
        _messagesTypes[5762] = ExchangeGuildTaxCollectorGetMessage;
        _messagesTypes[5769] = ItemNoMoreAvailableMessage;
        _messagesTypes[5759] = ExchangeBuyOkMessage;
        _messagesTypes[5792] = ExchangeSellOkMessage;
        _messagesTypes[5787] = ExchangeReplyTaxVendorMessage;
        _messagesTypes[5786] = ExchangeWaitingResultMessage;
        _messagesTypes[5991] = ExchangeStartOkMountWithOutPaddockMessage;
        _messagesTypes[5979] = ExchangeStartOkMountMessage;
        _messagesTypes[5981] = ExchangeMountStableErrorMessage;
        _messagesTypes[5971] = ExchangeMountStableAddMessage;
        _messagesTypes[6049] = ExchangeMountPaddockAddMessage;
        _messagesTypes[5966] = ExchangeMountStableBornAddMessage;
        _messagesTypes[5964] = ExchangeMountStableRemoveMessage;
        _messagesTypes[6050] = ExchangeMountPaddockRemoveMessage;
        _messagesTypes[5994] = ExchangeMountTakenFromPaddockMessage;
        _messagesTypes[6055] = ExchangeMountFreeFromPaddockMessage;
        _messagesTypes[6056] = ExchangeMountSterilizeFromPaddockMessage;
        _messagesTypes[5802] = ExchangeBidSearchOkMessage;
        _messagesTypes[5810] = ExchangeItemAutoCraftStopedMessage;
        _messagesTypes[6015] = ExchangeItemAutoCraftRemainingMessage;
        _messagesTypes[5813] = ExchangeStartOkCraftMessage;
        _messagesTypes[5941] = ExchangeStartOkCraftWithInformationMessage;
        _messagesTypes[5818] = ExchangeStartOkMulticraftCrafterMessage;
        _messagesTypes[5817] = ExchangeStartOkMulticraftCustomerMessage;
        _messagesTypes[5819] = ExchangeStartOkJobIndexMessage;
        _messagesTypes[5833] = ExchangeGoldPaymentForCraftMessage;
        _messagesTypes[5831] = ExchangeItemPaymentForCraftMessage;
        _messagesTypes[5832] = ExchangeModifiedPaymentForCraftMessage;
        _messagesTypes[6031] = ExchangeRemovedPaymentForCraftMessage;
        _messagesTypes[6145] = ExchangeClearPaymentForCraftMessage;
        _messagesTypes[6179] = UpdateMountBoostMessage;
        _messagesTypes[5739] = PurchasableDialogMessage;
        _messagesTypes[6315] = AccountHouseMessage;
        _messagesTypes[5734] = HousePropertiesMessage;
        _messagesTypes[5735] = HouseBuyResultMessage;
        _messagesTypes[5737] = HouseSoldMessage;
        _messagesTypes[6140] = HouseToSellListMessage;
        _messagesTypes[5701] = HouseGuildNoneMessage;
        _messagesTypes[5703] = HouseGuildRightsMessage;
        _messagesTypes[5824] = PaddockPropertiesMessage;
        _messagesTypes[6018] = PaddockSellBuyDialogMessage;
        _messagesTypes[6026] = GameDataPlayFarmObjectAnimationMessage;
        _messagesTypes[6138] = PaddockToSellListMessage;
        _messagesTypes[5977] = MountSterilizedMessage;
        _messagesTypes[6308] = MountReleasedMessage;
        _messagesTypes[5983] = MountRenamedMessage;
        _messagesTypes[5970] = MountXpRatioMessage;
        _messagesTypes[5973] = MountDataMessage;
        _messagesTypes[6172] = MountDataErrorMessage;
        _messagesTypes[5968] = MountSetMessage;
        _messagesTypes[5982] = MountUnSetMessage;
        _messagesTypes[5963] = MountEquipedErrorMessage;
        _messagesTypes[5967] = MountRidingMessage;
        _messagesTypes[5993] = GameDataPaddockObjectRemoveMessage;
        _messagesTypes[5990] = GameDataPaddockObjectAddMessage;
        _messagesTypes[5992] = GameDataPaddockObjectListAddMessage;
        _messagesTypes[5978] = MountEmoteIconUsedOkMessage;
        _messagesTypes[5740] = LockableShowCodeDialogMessage;
        _messagesTypes[5672] = LockableCodeResultMessage;
        _messagesTypes[5671] = LockableStateUpdateAbstractMessage;
        _messagesTypes[5668] = LockableStateUpdateHouseDoorMessage;
        _messagesTypes[5669] = LockableStateUpdateStorageMessage;
        _messagesTypes[5675] = DocumentReadingBeginMessage;
        _messagesTypes[5934] = ContactLookMessage;
        _messagesTypes[6045] = ContactLookErrorMessage;
        _messagesTypes[6275] = MailStatusMessage;
        _messagesTypes[6292] = NewMailMessage;
        _messagesTypes[6186] = PackRestrictedSubAreaMessage;
        _messagesTypes[1502] = PartsListMessage;
        _messagesTypes[1508] = PartInfoMessage;
        _messagesTypes[1511] = DownloadCurrentSpeedMessage;
        _messagesTypes[1513] = DownloadErrorMessage;
    }
}
